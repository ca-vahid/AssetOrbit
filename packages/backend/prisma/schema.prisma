// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User model - integrated with Azure AD
model User {
  id                String   @id @default(uuid())
  azureAdId         String   @unique
  email             String   @unique
  displayName       String
  givenName         String?
  surname           String?
  jobTitle          String?
  department        String?
  officeLocation    String?
  role              String   @default("READ") // READ, WRITE, ADMIN
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  assignedAssets    Asset[]  @relation("AssignedTo")
  createdAssets     Asset[]  @relation("CreatedBy")
  updatedAssets     Asset[]  @relation("UpdatedBy")
  activities        ActivityLog[]
  // Document uploads
  uploadedDocuments Document[]
  // Import runs initiated by this user
  initiatedImportRuns ImportSyncRun[] @relation("ImportSyncRunInitiatedBy")
}

// Department model
model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assets      Asset[]
}

// Location model - supports both Azure AD sourced and manual locations
model Location {
  id          String   @id @default(uuid())
  city        String
  province    String   // "state" from Azure AD
  country     String   @default("Canada")
  source      String   @default("AZURE_AD") // AZURE_AD or MANUAL
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assets      Asset[]

  @@unique([city, province, country])
  @@index([isActive])
}

// Vendor model
model Vendor {
  id          String   @id @default(uuid())
  name        String   @unique
  contactName String?
  email       String?
  phone       String?
  website     String?
  address     String?
  notes       String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assets      Asset[]
}

// Main Asset model - extensible for different asset types
model Asset {
  id                String        @id @default(uuid())
  assetTag          String        @unique
  assetType         String        // LAPTOP, DESKTOP, TABLET, PHONE, OTHER
  status            String        @default("AVAILABLE") // AVAILABLE, ASSIGNED, SPARE, MAINTENANCE, RETIRED, DISPOSED
  condition         String        @default("GOOD") // NEW, GOOD, FAIR, POOR
  source            String        @default("MANUAL") // MANUAL, NINJAONE, INTUNE, EXCEL, BULK_UPLOAD, API
  
  // Basic Information
  make              String
  model             String
  serialNumber      String?
  
  // Specifications (stored as JSON string)
  specifications    String?       @db.NVarChar(4000)
  
  // Assignment & Location
  assignedToId      String?
  assignedTo        User?         @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  assignedToAadId   String?       // Azure AD ID for staff members (non-IT users)
  departmentId      String?
  department        Department?   @relation(fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  locationId        String?
  location          Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  // Purchase & Warranty
  purchaseDate      DateTime?
  purchasePrice     Decimal?
  vendorId          String?
  vendor            Vendor?       @relation(fields: [vendorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  warrantyStartDate DateTime?
  warrantyEndDate   DateTime?
  warrantyNotes     String?       @db.Text
  
  // Additional Information
  notes             String?       @db.Text
  
  // Audit Fields
  createdById       String
  createdBy         User          @relation("CreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedById       String?
  updatedBy         User?         @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  tickets           AssetTicket[]
  activities        ActivityLog[]
  attachments       Attachment[]
  // Dynamic custom fields
  customFieldValues CustomFieldValue[]
  // New many-to-many relation to workload categories
  workloadCategories AssetWorkloadCategory[]
  // Linked documents
  documents         AssetDocument[]
  // Presence links per external source
  externalSourceLinks ExternalSourceLink[]
  
  @@index([assetType, status])
  @@index([serialNumber])
  @@index([assignedToId])
  @@index([assignedToAadId])
  @@index([departmentId])
  @@index([locationId])
}

// Asset Tickets (integration with ticketing systems)
model AssetTicket {
  id            String   @id @default(uuid())
  assetId       String
  asset         Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketNumber  String
  ticketSystem  String   @default("Freshservice")
  title         String?
  description   String?  @db.Text
  status        String?
  priority      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([ticketNumber, ticketSystem])
  @@index([assetId])
}

// Activity Log for audit trail
model ActivityLog {
  id          String   @id @default(uuid())
  assetId     String?
  asset       Asset?   @relation(fields: [assetId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  action      String
  entityType  String
  entityId    String
  changes     String?  @db.NVarChar(4000) // JSON stored as string
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([assetId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// Attachments for assets
model Attachment {
  id          String   @id @default(uuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileName    String
  fileType    String
  fileSize    Int
  storageUrl  String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  
  @@index([assetId])
}

// Documents stored once and linked to many assets (Admin-only by default)
model Document {
  id           String   @id @default(uuid())
  fileName     String
  fileType     String
  fileSize     Int
  storagePath  String
  isAdminOnly  Boolean  @default(true)
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt    DateTime @default(now())

  assetLinks   AssetDocument[]
}

// Join between assets and documents
model AssetDocument {
  assetId    String
  documentId String
  asset      Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([assetId, documentId])
  @@index([documentId])
}

// Custom Field Definitions for dynamic asset attributes
model CustomField {
  id          String   @id @default(uuid())
  name        String
  fieldType   String   // STRING, NUMBER, SINGLE_SELECT, MULTI_SELECT, DATE, BOOLEAN
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  options     String?  @db.NVarChar(2000) // JSON array for select options
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  values      CustomFieldValue[]

  @@unique([name])
}

// Junction table storing per-asset custom field values
model CustomFieldValue {
  id        String   @id @default(uuid())
  assetId   String
  fieldId   String
  // Store value as string or JSON; interpret based on field definition
  value     String?  @db.NVarChar(4000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  asset     Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  field     CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([assetId, fieldId])
  @@index([assetId])
  @@index([fieldId])
}

// WorkloadCategory model
model WorkloadCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assetLinks  AssetWorkloadCategory[]
  rules       WorkloadCategoryRule[]
}

// Junction table linking Assets to Workload Categories (many-to-many)
model AssetWorkloadCategory {
  assetId     String
  categoryId  String
  assignedAt  DateTime @default(now())

  // Relations
  asset       Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category    WorkloadCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([assetId, categoryId])
  @@index([categoryId])
  @@index([assetId])
}

// Rules for automatic workload category detection during import
model WorkloadCategoryRule {
  id              String   @id @default(uuid())
  categoryId      String
  category        WorkloadCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  priority        Int      // 1 = highest priority, stops evaluation when matched
  sourceField     String   // e.g. "assignedToAadId", "specifications.ram", "make"
  operator        String   // '=', '!=', '>=', '<=', 'includes', 'regex'
  value           String   // value to compare against
  description     String?  // human-readable description of the rule
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([priority])
  @@index([categoryId])
  @@index([isActive])
}

// Tracks per-source presence of an asset (e.g., NinjaOne, Telus, Rogers)
model ExternalSourceLink {
  id           String   @id @default(uuid())
  assetId      String
  asset        Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceSystem String
  externalId   String   // serialNumber used as externalId for all supported sources
  firstSeenAt  DateTime @default(now())
  lastSeenAt   DateTime @default(now())
  isPresent    Boolean  @default(true)
  metadata     String?  @db.NVarChar(2000)

  @@unique([sourceSystem, externalId])
  @@index([assetId])
  @@index([sourceSystem, isPresent])
}

// Records an import run (snapshot) with aggregated stats for auditing
model ImportSyncRun {
  id             String   @id @default(uuid())
  sourceSystem   String
  isFullSnapshot Boolean  @default(true)
  startedAt      DateTime @default(now())
  finishedAt     DateTime?
  stats          String?  @db.NVarChar(4000)
  initiatedById  String
  initiatedBy    User     @relation("ImportSyncRunInitiatedBy", fields: [initiatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([sourceSystem, startedAt])
}
